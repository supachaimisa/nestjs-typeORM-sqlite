"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const shared_utils_1 = require("@nestjs/common/utils/shared.utils");
require("reflect-metadata");
const gql_paramtype_enum_1 = require("../enums/gql-paramtype.enum");
const lazy_metadata_storage_1 = require("../schema-builder/storages/lazy-metadata.storage");
const type_metadata_storage_1 = require("../schema-builder/storages/type-metadata.storage");
const reflection_utilts_1 = require("../utils/reflection.utilts");
const param_utils_1 = require("./param.utils");
function Args(propertyOrOptions, ...pipes) {
    let typeFn = undefined;
    let argOptions = {};
    let property = propertyOrOptions;
    if (propertyOrOptions &&
        shared_utils_1.isObject(propertyOrOptions) &&
        !propertyOrOptions.transform) {
        property = propertyOrOptions.name;
        typeFn = propertyOrOptions.type;
        const basicOptions = propertyOrOptions;
        argOptions = {
            description: basicOptions.description,
            nullable: basicOptions.nullable,
            defaultValue: basicOptions.defaultValue,
        };
    }
    return (target, key, index) => {
        param_utils_1.addPipesMetadata(gql_paramtype_enum_1.GqlParamtype.ARGS, property, pipes, target, key, index);
        lazy_metadata_storage_1.LazyMetadataStorage.store(target.constructor, () => {
            const { typeFn: reflectedTypeFn, options } = reflection_utilts_1.reflectTypeFromMetadata({
                metadataKey: 'design:paramtypes',
                prototype: target,
                propertyKey: key,
                index: index,
                explicitTypeFn: typeFn,
                typeOptions: argOptions,
            });
            const metadata = {
                target: target.constructor,
                methodName: key,
                typeFn: reflectedTypeFn,
                index,
                options,
            };
            if (property && shared_utils_1.isString(property)) {
                type_metadata_storage_1.TypeMetadataStorage.addMethodParamMetadata(Object.assign({ kind: 'arg', name: property, description: argOptions.description }, metadata));
            }
            else {
                type_metadata_storage_1.TypeMetadataStorage.addMethodParamMetadata(Object.assign({ kind: 'args' }, metadata));
            }
        });
    };
}
exports.Args = Args;
